<?xml version="1.0" encoding="UTF-8"?>
<ruleset name="Base ruleset" xmlns="http://pmd.sourceforge.net/ruleset/2.0.0"
		 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		 xsi:schemaLocation="http://pmd.sourceforge.net/ruleset/2.0.0 http://pmd.sourceforge.net/ruleset_2_0_0.xsd">

	<description>
		General Java quality rules.
	</description>

	<!-- Custom Rules -->
	<rule name="ForbidInjectionIntoStaticFields"
		language="java"
		message="Injection into static field detected."
		class="net.sourceforge.pmd.lang.rule.xpath.XPathRule"
		typeResolution="true"
		externalInfoUrl="https://sling.apache.org/documentation/bundles/models.html"
	>
		<description>Injection into static fields is not allowed. Sling models will silently work but fail with multiple concurrent requests.</description>
		<priority>3</priority>
		<properties>
			<property name="xpath">
				<value>
					<![CDATA[
						//Annotation/*/Name[
							(
								pmd-java:typeIs('javax.inject.Inject')
								or pmd-java:typeIs('org.apache.sling.models.annotations.injectorspecific.ScriptVariable')
								or pmd-java:typeIs('org.apache.sling.models.annotations.injectorspecific.ValueMapValue')
								or pmd-java:typeIs('org.apache.sling.models.annotations.injectorspecific.ChildResource')
								or pmd-java:typeIs('org.apache.sling.models.annotations.injectorspecific.RequestAttribute')
								or pmd-java:typeIs('org.apache.sling.models.annotations.injectorspecific.ResourcePath')
								or pmd-java:typeIs('org.apache.sling.models.annotations.injectorspecific.Self')
								or pmd-java:typeIs('org.apache.sling.models.annotations.injectorspecific.SlingObject')
							) and ../../../FieldDeclaration[@Static = true()]
						]
					]]>
				</value>
			</property>
		</properties>
		<example>
			<![CDATA[
@Model()
public class TeaserImpl implements Teaser {
	@Inject
	private static String test;
}

			]]>
		</example>
	</rule>

	<!-- Best practices (https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_bestpractices.html) -->
	<rule ref="category/java/bestpractices.xml">
		<exclude name="AbstractClassWithoutAbstractMethod"/>
		<!-- disabled as it's important for android and doesn't matter for general java (also fixes conflict with checkstyle's VisibilityModifier check -->
		<exclude name="AccessorMethodGeneration"/>
		<exclude name="ArrayIsStoredDirectly"/>
		<exclude name="GuardLogStatement"/>
		<exclude name="JUnitAssertionsShouldIncludeMessage"/>
		<exclude name="JUnit4SuitesShouldUseSuiteAnnotation"/>
		<exclude name="JUnitTestsShouldIncludeAssert"/>
		<exclude name="JUnit4TestShouldUseBeforeAnnotation"/>
		<exclude name="JUnit4TestShouldUseAfterAnnotation"/>
		<exclude name="JUnit4TestShouldUseTestAnnotation"/>
	</rule>
	<rule ref="category/java/bestpractices.xml/UnusedPrivateMethod">
		<properties>
			<property name="ignoredAnnotations" value="javax.annotation.PostConstruct"/>
		</properties>
	</rule>


	<!-- Code style (https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_codestyle.html) -->
	<rule ref="category/java/codestyle.xml">
		<exclude name="AtLeastOneConstructor"/>
		<exclude name="CallSuperInConstructor"/>
		<exclude name="CommentDefaultAccessModifier"/>
		<exclude name="ClassNamingConventions"/>
		<exclude name="LocalHomeNamingConvention"/> <!-- earlier j2ee group-->
		<exclude name="LocalInterfaceSessionNamingConvention"/> <!-- earlier j2ee group-->
		<exclude name="LocalVariableCouldBeFinal"/> <!-- covered by checkstyle -->
		<exclude name="MethodArgumentCouldBeFinal"/> <!-- checkstyle forces arguments to be effectively final anyway, making this explicit in the code provides no benefit -->
		<exclude name="LongVariable"/>
		<exclude name="ShortClassName"/>
		<exclude name="ShortVariable"/>
		<exclude name="MDBAndSessionBeanNamingConvention"/> <!-- earlier j2ee group-->
		<exclude name="OnlyOneReturn"/> <!-- disabled in favour of checkstyle ReturnCount check -->
		<exclude name="RemoteInterfaceNamingConvention"/> <!-- earlier j2ee group-->
		<exclude name="RemoteSessionInterfaceNamingConvention"/> <!-- earlier j2ee group-->
	</rule>
	<rule ref="category/java/codestyle.xml/FieldNamingConventions">
		<properties>
			<property name="enumConstantPattern" value="[A-Z][a-zA-Z_0-9]*"/>
		</properties>
	</rule>

	<!-- Design (https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_design.html) -->
	<rule ref="category/java/design.xml">
		<exclude name="AvoidCatchingGenericException"/>
		<exclude name="DataClass"/>
		<exclude name="ExcessiveImports"/> <!-- Useless as it also counts imports for annotations -->
		<exclude name="LawOfDemeter"/>
		<exclude name="LoosePackageCoupling"/>
		<exclude name="SignatureDeclareThrowsException"/>
		<exclude name="SimplifyBooleanReturns"/> <!-- People naturally do this where it makes sense -->
		<exclude name="TooManyFields"/> <!-- Unusable for sling models -->
	</rule>
	<rule ref="category/java/design.xml/AvoidDeeplyNestedIfStmts">
		<properties>
			<property name="problemDepth" value="4"/>
		</properties>
	</rule>
	<rule ref="category/java/design.xml/CyclomaticComplexity">
		<properties>
			<property name="cycloOptions" value="ignoreBooleanPaths"/>
			<property name="classReportLevel" value="81"/>
			<property name="methodReportLevel" value="11"/>
		</properties>
	</rule>
	<rule ref="category/java/design.xml/NcssCount">
		<properties>
			<property name="methodReportLevel" value="30"/>
			<property name="classReportLevel" value="300"/>
		</properties>
	</rule>
	<rule ref="category/java/design.xml/NPathComplexity">
		<properties>
			<property name="reportLevel" value="201"/>
		</properties>
	</rule>
	<rule ref="category/java/design.xml/TooManyMethods" message="Avoid classes longer than 20 methods">
		<properties>
			<property name="maxmethods" value="20"/>
		</properties>
	</rule>


	<!-- Documentation (https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_documentation.html) -->
	<rule ref="category/java/documentation.xml">
		<exclude name="CommentRequired"/>
		<exclude name="CommentSize"/>
	</rule>


	<!-- Error prone (https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_errorprone.html) -->
	<rule ref="category/java/errorprone.xml">
		<exclude name="NonSerializableClass"/>
		<exclude name="MissingSerialVersionUID"/>
		<exclude name="DoNotTerminateVM"/> <!-- earlier j2ee group-->
		<exclude
			name="NullAssignment"/> <!-- disabled due to false positive for initialization with ternary operator -->
		<exclude name="StaticEJBFieldShouldBeFinal"/> <!-- earlier j2ee group-->
		<exclude name="UseCorrectExceptionLogging"/>
		<exclude name="UseLocaleWithCaseConversions"/>
		<exclude name="UseProperClassLoader"/> <!-- earlier j2ee group-->
		<exclude name="ReturnEmptyCollectionRatherThanNull"/>
	</rule>
	<rule ref="category/java/errorprone.xml/AvoidDuplicateLiterals">
		<properties>
			<property name="skipAnnotations" value="true"/>
		</properties>
	</rule>
	<rule ref="category/java/errorprone.xml/CloseResource">
		<properties>
			<property
				name="allowedResourceTypes"
				value="java.io.ByteArrayOutputStream , java.io.ByteArrayInputStream , java.io.StringWriter , java.io.CharArrayWriter , java.util.stream.Stream , org.apache.sling.api.resource.ResourceResolver"/>
		</properties>
	</rule>
	<rule ref="category/java/errorprone.xml/AvoidLiteralsInIfCondition">
		<properties>
			<property name="ignoreMagicNumbers" value="-1,0,1"/>
		</properties>
	</rule>

	<!-- Multi-threading (https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_multithreading.html) -->
	<rule ref="category/java/multithreading.xml">
		<exclude name="DoNotUseThreads"/> <!-- earlier j2ee group-->
		<exclude name="UseConcurrentHashMap"/>
	</rule>

	<!-- Security (no rules) -->
	<rule ref="category/java/security.xml"/>

</ruleset>
